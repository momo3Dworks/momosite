{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///F:/BLENDER%20CONTENT%20CREATOR%20COURSE/NEW%20MOMO%203D%20SITE/REFORGED_MOMO/momojourney/src/components/ScrollSurferScene.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader.js';\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Bloom effect parameters\nconst bloomParams = {\n  threshold: 0.3, \n  strength: 0.5,  \n  radius: 0.4,    \n};\n\n// Spaceship mouse interaction parameters\nconst mouseFollowSpeed = 0.07; \nconst shipRotationFactor = 0.4; \nconst shipMaxTilt = Math.PI / 9; \nconst parallaxFactorX = 6; \nconst parallaxFactorY = 3; \nconst SHIP_INTRO_ANIMATION_SPEED = 0.03;\n\n// Trail Particle Parameters\nconst MAX_TRAIL_PARTICLES = 150; \nconst PARTICLE_LIFETIME_MIN = 0.8; \nconst PARTICLE_LIFETIME_MAX = 1.5; \nconst PARTICLE_EMISSION_INTENSITY_THRESHOLD = 40.0; \nconst EFFECTIVE_EMISSION_RATE = 250.0; \nconst PARTICLE_SPEED_MIN = 4.0; \nconst PARTICLE_SPEED_MAX = 7.0; \nconst PARTICLE_BASE_SIZE = 0.2; \nconst PARTICLE_EMISSION_OFFSET = -0.35;\n\n// Acceleration Effect Parameters\nconst FORWARD_BOOST_AMOUNT = 40; // How much the ship lurches forward on scroll\nconst FOV_DECREASE_AMOUNT = 30; // How much the FOV narrows on scroll\nconst ACCELERATION_EFFECT_LERP_SPEED = 0.1; // Speed of FOV and boost interpolation\nconst SCROLL_DIRECTION_FOR_EFFECTS: 'down' | 'up' | 'both' = 'down'; // Configurable: 'down', 'up', or 'both'\n\n\nconst speedLinesVertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nconst speedLinesFragmentShader = `\n  uniform sampler2D tDiffuse;\n  uniform vec2 u_resolution;\n  uniform float u_time;\n  uniform float u_scroll_active; // 0.0 (not scrolling) or 1.0 (scrolling)\n  varying vec2 vUv;\n\n  float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n  }\n\n  void main() {\n      vec4 originalColor = texture2D(tDiffuse, vUv);\n      vec3 finalColor = originalColor.rgb;\n\n      if (u_scroll_active > 0.01) { // Apply effect if scrolling is active\n          vec2 to_center = vec2(0.5) - vUv;\n          float dist_to_center = length(to_center);\n          \n          float line_intensity = 0.0;\n          \n          // Radial streaks from edges\n          float streaks = 0.0;\n          if (dist_to_center > 0.05) { // Avoid center\n              float angle = atan(to_center.y, to_center.x);\n              float num_lines = 30.0; // Number of distinct streak lines\n              float time_component = u_time * (2.0 + u_scroll_active * 3.0); // Faster animation when scrolling\n\n              for (float i = 0.0; i < num_lines; i += 1.0) {\n                  float line_progress = fract(random(vec2(i, i * 0.73)) + time_component * (0.02 + random(vec2(i*0.2,0.0)) * 0.03));\n                  float line_angle = random(vec2(i * 0.3, i * 0.91)) * 6.283185;\n                  \n                  float current_line_dist = abs(dist_to_center - (0.5 - line_progress * 0.5));\n                  float angle_diff = abs(mod(angle - line_angle + 3.14159, 6.283185) - 3.14159);\n                  \n                  float streak_brightness = smoothstep(0.015, 0.0, current_line_dist) * smoothstep(0.1, 0.0, angle_diff);\n                  streak_brightness *= (0.5 + line_progress * 0.5); // Fade in/out along length\n\n                  streaks += streak_brightness;\n              }\n          }\n          \n          line_intensity = clamp(streaks * u_scroll_active * 0.2, 0.0, 0.25); // Control overall intensity\n          vec3 speed_line_color = vec3(0.9, 0.9, 1.0) * line_intensity;\n          finalColor += speed_line_color;\n      }\n\n      gl_FragColor = vec4(finalColor, originalColor.a);\n  }\n`;\n\n\nconst ScrollSurferScene: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const spaceshipRef = useRef<THREE.Group | null>(null);\n  const wormholeRef = useRef<THREE.Group | null>(null); // Ref for wormhole model\n  const composerRef = useRef<EffectComposer | null>(null);\n  const bloomPassRef = useRef<UnrealBloomPass | null>(null);\n  const speedLinesPassRef = useRef<ShaderPass | null>(null);\n  const mixerRef = useRef<THREE.AnimationMixer | null>(null); \n  \n  const trailParticlesRef = useRef<Array<any>>([]);\n  const trailParticleContainerRef = useRef<THREE.Group | null>(null);\n  const particleGeometryRef = useRef<THREE.PlaneGeometry | null>(null);\n  const particleMaterialRef = useRef<THREE.MeshBasicMaterial | null>(null);\n\n  const wormholeMaterial1Ref = useRef<THREE.MeshStandardMaterial | null>(null);\n  const wormholeMaterial2Ref = useRef<THREE.MeshStandardMaterial | null>(null);\n\n  const { toast } = useToast();\n\n  const mousePositionRef = useRef(new THREE.Vector2(0, 0));\n  const targetShipPositionRef = useRef(new THREE.Vector3(0, 0, 0));\n  const isMouseOutsideRef = useRef(false);\n  const shipIntroAnimationCompleteRef = useRef(false);\n\n  // Camera initial state (configurable in code)\n  const [cameraPosX, setCameraPosX] = useState(0); \n  const [cameraPosY, setCameraPosY] = useState(1.5); \n  const [cameraPosZ, setCameraPosZ] = useState(8); \n  const [cameraRotX, setCameraRotX] = useState(-0.05); \n  const [cameraRotY, setCameraRotY] = useState(0); \n  const [cameraRotZ, setCameraRotZ] = useState(0); \n  const [cameraFov, setCameraFov] = useState(70); \n\n  // Spaceship initial state (configurable in code)\n  const [shipBasePosX, setShipBasePosX] = useState(0); \n  const [shipBasePosY, setShipBasePosY] = useState(-1.5); \n  const [shipBasePosZ, setShipBasePosZ] = useState(-4); \n  const [shipRotX, setShipRotX] = useState(0); \n  const [shipRotY, setShipRotY] = useState(Math.PI); \n  const [shipRotZState, setShipRotZState] = useState(0); \n  const [shipScale, setShipScale] = useState(0.45); \n\n  // Spaceship emissive intensity state\n  const [shipEmissiveIntensity, setShipEmissiveIntensity] = useState(10.0); // Initial/Resting intensity\n  const targetEmissiveIntensityRef = useRef(30.0);\n  const isScrollingRef = useRef(false); // This ref specifically means \"effects are active\"\n  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const lastScrollTopRef = useRef(0);\n\n  // Wormhole initial state (configurable in code)\n  const [wormholePosX, setWormholePosX] = useState(0); \n  const [wormholePosY, setWormholePosY] = useState(0); \n  const [wormholePosZ, setWormholePosZ] = useState(1000); \n  const [wormholeRotX, setWormholeRotX] = useState(0); \n  const [wormholeRotY, setWormholeRotY] = useState(0); \n  const [wormholeRotZ, setWormholeRotZ] = useState(0); \n  const [wormholeScale, setWormholeScale] = useState(10); \n\n  // Wormhole material states (configurable in code)\n  const [wormhole1EmissiveIntensity, setWormhole1EmissiveIntensity] = useState(45.0);\n  const [wormhole1OffsetXSpeed, setWormhole1OffsetXSpeed] = useState(0.02);\n  const [wormhole1OffsetYSpeed, setWormhole1OffsetYSpeed] = useState(-0.06);\n\n  const [wormhole2EmissiveIntensity, setWormhole2EmissiveIntensity] = useState(25.0);\n  const [wormhole2OffsetXSpeed, setWormhole2OffsetXSpeed] = useState(0.02);\n  const [wormhole2OffsetYSpeed, setWormhole2OffsetYSpeed] = useState(-0.09);\n\n  // Acceleration effect refs\n  const targetShipBoostZOffsetRef = useRef(0);\n  const currentShipBoostZOffsetRef = useRef(0);\n  const targetCameraFovForBoostRef = useRef(cameraFov); // Initialized with base cameraFov\n  \n  const emitTrailParticle = useCallback(() => {\n    if (!spaceshipRef.current || !trailParticleContainerRef.current || !particleGeometryRef.current || !particleMaterialRef.current || !cameraRef.current) return;\n    if (trailParticlesRef.current.length >= MAX_TRAIL_PARTICLES) return;\n\n    const spaceship = spaceshipRef.current;\n    const particle = new THREE.Mesh(particleGeometryRef.current, particleMaterialRef.current.clone()); \n\n    const shipWorldPosition = new THREE.Vector3();\n    spaceship.getWorldPosition(shipWorldPosition);\n    const shipWorldQuaternion = new THREE.Quaternion();\n    spaceship.getWorldQuaternion(shipWorldQuaternion);\n\n    const offsetVector = new THREE.Vector3(0, 0, PARTICLE_EMISSION_OFFSET); \n    offsetVector.applyQuaternion(shipWorldQuaternion);\n    particle.position.copy(shipWorldPosition).add(offsetVector);\n    \n    const baseVelocity = new THREE.Vector3(0, 0, -(PARTICLE_SPEED_MIN + Math.random() * (PARTICLE_SPEED_MAX - PARTICLE_SPEED_MIN)));\n    baseVelocity.applyQuaternion(shipWorldQuaternion); \n\n    baseVelocity.x += (Math.random() - 0.5) * 0.5;\n    baseVelocity.y += (Math.random() - 0.5) * 0.5;\n    baseVelocity.z += (Math.random() - 0.5) * 0.5;\n\n    const lifetime = PARTICLE_LIFETIME_MIN + Math.random() * (PARTICLE_LIFETIME_MAX - PARTICLE_LIFETIME_MIN);\n    \n    trailParticleContainerRef.current.add(particle);\n    trailParticlesRef.current.push({\n      mesh: particle,\n      velocity: baseVelocity,\n      life: lifetime,\n      maxLife: lifetime,\n      initialScale: PARTICLE_BASE_SIZE + (Math.random() - 0.5) * PARTICLE_BASE_SIZE * 0.3,\n    });\n  }, []);\n\n\n  const initThreeScene = useCallback((currentMount: HTMLDivElement) => {\n    if (!currentMount || rendererRef.current) return;\n\n    console.log(\"Initializing Three.js scene...\");\n\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n    scene.fog = new THREE.Fog(0xffffff, 80, 300); \n    targetShipPositionRef.current.set(shipBasePosX, shipBasePosY, shipBasePosZ);\n    targetCameraFovForBoostRef.current = cameraFov; \n\n\n    const camera = new THREE.PerspectiveCamera(cameraFov, currentMount.clientWidth / currentMount.clientHeight, 0.1, 1000);\n    cameraRef.current = camera;\n    camera.position.set(cameraPosX, cameraPosY, cameraPosZ);\n    camera.rotation.set(cameraRotX, cameraRotY, cameraRotZ);\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio || 1);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.0;\n    currentMount.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Effect Composer Setup\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    const bloomPassInstance = new UnrealBloomPass(\n        new THREE.Vector2(currentMount.clientWidth, currentMount.clientHeight),\n        bloomParams.strength,\n        bloomParams.radius,\n        bloomParams.threshold\n    );\n    bloomPassRef.current = bloomPassInstance;\n    composer.addPass(bloomPassInstance);\n\n    // Speed Lines Pass\n    const speedLinesMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n            tDiffuse: { value: null },\n            u_resolution: { value: new THREE.Vector2(currentMount.clientWidth, currentMount.clientHeight) },\n            u_time: { value: 0.0 },\n            u_scroll_active: { value: 0.0 },\n        },\n        vertexShader: speedLinesVertexShader,\n        fragmentShader: speedLinesFragmentShader,\n    });\n    const speedLinesPassInstance = new ShaderPass(speedLinesMaterial);\n    speedLinesPassRef.current = speedLinesPassInstance;\n    composer.addPass(speedLinesPassInstance);\n\n\n    const finalPass = new ShaderPass(CopyShader);\n    finalPass.renderToScreen = true; \n    composer.addPass(finalPass);\n\n\n    // Particle resources\n    particleGeometryRef.current = new THREE.PlaneGeometry(1, 1); \n    particleMaterialRef.current = new THREE.MeshBasicMaterial({\n        color: 0xffffff, \n        transparent: true,\n        opacity: 1.0,\n        blending: THREE.AdditiveBlending, \n        depthWrite: false, \n    });\n    trailParticleContainerRef.current = new THREE.Group();\n    scene.add(trailParticleContainerRef.current);\n\n\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load(\n      '/hdri/sky_1.hdr',\n      (texture) => {\n        texture.mapping = THREE.EquirectangularReflectionMapping;\n        scene.environment = texture;\n        scene.background = texture; \n        console.log('HDRI loaded and set for environment and background.');\n      },\n      undefined,\n      (error) => {\n        console.error('Error loading HDRI:', error);\n        scene.background = new THREE.Color(0x05050a); \n        toast({ variant: 'destructive', title: 'HDRI Load Error', description: 'Could not load /hdri/sky_1.hdr. Using default dark background.' });\n      }\n    );\n    \n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.05); \n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.02); \n    directionalLight.position.set(2, 5, -5);\n    scene.add(directionalLight);\n\n    const loader = new GLTFLoader();\n    loader.load(\n      '/models/spaceship.glb',\n      (gltf) => {\n        const spaceship = gltf.scene;\n        spaceshipRef.current = spaceship;\n        \n        const initialOffScreenZ = shipBasePosZ - -60; \n        spaceship.position.set(shipBasePosX, shipBasePosY, initialOffScreenZ);\n        shipIntroAnimationCompleteRef.current = false; \n\n        spaceship.rotation.set(shipRotX, shipRotY, shipRotZState);\n        spaceship.scale.set(shipScale, shipScale, shipScale);\n        \n        spaceship.traverse((child) => {\n          if (child instanceof THREE.Mesh && child.material) {\n            const materials = Array.isArray(child.material) ? child.material : [child.material];\n            materials.forEach(material => {\n              if ((material as THREE.MeshStandardMaterial).isMeshStandardMaterial) {\n                const standardMaterial = material as THREE.MeshStandardMaterial;\n                if (standardMaterial.emissiveMap) {\n                  standardMaterial.emissiveIntensity = 30.0; // Initial emissive state\n                  standardMaterial.needsUpdate = true;\n                }\n              }\n            });\n          }\n        });\n        scene.add(spaceship);\n        console.log('Spaceship model loaded.');\n\n        if (gltf.animations && gltf.animations.length) {\n          mixerRef.current = new THREE.AnimationMixer(spaceship);\n          gltf.animations.forEach((clip) => {\n            if(mixerRef.current){\n              const action = mixerRef.current.clipAction(clip);\n              action.play();\n            }\n          });\n          console.log(`Loaded ${gltf.animations.length} animations for spaceship.`);\n        } else {\n          console.log('No animations found in spaceship.glb.');\n        }\n\n      },\n      undefined,\n      (error) => {\n        console.error('Error loading spaceship model:', error);\n        toast({ variant: \"destructive\", title: \"Spaceship load error\", description: \"Could not load /models/spaceship.glb.\" });\n      }\n    );\n\n    loader.load(\n      '/models/WORMHOLE.glb',\n      (gltf) => {\n        const wormhole = gltf.scene;\n        wormholeRef.current = wormhole;\n        wormhole.position.set(wormholePosX, wormholePosY, wormholePosZ);\n        wormhole.rotation.set(wormholeRotX, wormholeRotY, wormholeRotZ);\n        wormhole.scale.set(wormholeScale, wormholeScale, wormholeScale);\n        \n        wormhole.traverse((child) => {\n          if (child instanceof THREE.Mesh && child.material) {\n            const material = child.material as THREE.MeshStandardMaterial;\n            if (material.name === \"WORMHOLE 1\") {\n              wormholeMaterial1Ref.current = material;\n              material.emissiveIntensity = wormhole1EmissiveIntensity;\n              if (material.map) { material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping; }\n              if (material.emissiveMap) { material.emissiveMap.wrapS = material.emissiveMap.wrapT = THREE.RepeatWrapping; }\n              if (material.normalMap) { material.normalMap.wrapS = material.normalMap.wrapT = THREE.RepeatWrapping; }\n            } else if (material.name === \"WORMHOLE 2\") {\n              wormholeMaterial2Ref.current = material;\n              material.emissiveIntensity = wormhole2EmissiveIntensity;\n              if (material.map) { material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping; }\n              if (material.emissiveMap) { material.emissiveMap.wrapS = material.emissiveMap.wrapT = THREE.RepeatWrapping; }\n              if (material.normalMap) { material.normalMap.wrapS = material.normalMap.wrapT = THREE.RepeatWrapping; }\n            }\n          }\n        });\n        scene.add(wormhole);\n        console.log('Wormhole model loaded.');\n      },\n      undefined,\n      (error) => {\n        console.error('Error loading wormhole model:', error);\n        toast({ variant: \"destructive\", title: \"Wormhole load error\", description: \"Could not load /models/WORMHOLE.glb.\" });\n      }\n    );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    toast, \n    shipBasePosX, shipBasePosY, shipBasePosZ, \n    shipRotX, shipRotY, shipRotZState, shipScale, \n    wormholePosX, wormholePosY, wormholePosZ,\n    wormholeRotX, wormholeRotY, wormholeRotZ, wormholeScale,\n    wormhole1EmissiveIntensity, \n    wormhole2EmissiveIntensity, \n    cameraPosX, cameraPosY, cameraPosZ, cameraRotX, cameraRotY, cameraRotZ, cameraFov\n  ]); \n\n  useEffect(() => {\n    if (spaceshipRef.current) {\n      spaceshipRef.current.traverse((child) => {\n        if (child instanceof THREE.Mesh && child.material) {\n          const materials = Array.isArray(child.material) ? child.material : [child.material];\n          materials.forEach(material => {\n            if ((material as THREE.MeshStandardMaterial).isMeshStandardMaterial) {\n              const standardMaterial = material as THREE.MeshStandardMaterial;\n              if (standardMaterial.emissiveMap) { \n                standardMaterial.emissiveIntensity = shipEmissiveIntensity;\n                standardMaterial.needsUpdate = true; \n              }\n            }\n          });\n        }\n      });\n    }\n  }, [shipEmissiveIntensity]);\n\n  useEffect(() => {\n    if (wormholeMaterial1Ref.current) {\n      wormholeMaterial1Ref.current.emissiveIntensity = wormhole1EmissiveIntensity;\n      wormholeMaterial1Ref.current.needsUpdate = true;\n    }\n    if (wormholeMaterial2Ref.current) {\n      wormholeMaterial2Ref.current.emissiveIntensity = wormhole2EmissiveIntensity;\n      wormholeMaterial2Ref.current.needsUpdate = true;\n    }\n  }, [wormhole1EmissiveIntensity, wormhole2EmissiveIntensity]);\n\n  // Effect for initializing targetCameraFovForBoostRef when cameraFov changes\n  useEffect(() => {\n    targetCameraFovForBoostRef.current = cameraFov;\n  }, [cameraFov]);\n\n\n  const handleScroll = useCallback(() => {\n    const scrollTop = window.scrollY;\n    const scrollDelta = scrollTop - lastScrollTopRef.current;\n\n    let activateEffectsThisTick = false;\n    if (scrollDelta > 0 && SCROLL_DIRECTION_FOR_EFFECTS === 'down') {\n        activateEffectsThisTick = true;\n    } else if (scrollDelta < 0 && SCROLL_DIRECTION_FOR_EFFECTS === 'up') {\n        activateEffectsThisTick = true;\n    } else if (scrollDelta !== 0 && SCROLL_DIRECTION_FOR_EFFECTS === 'both') {\n        activateEffectsThisTick = true;\n    }\n\n    if (activateEffectsThisTick) {\n        if (!isScrollingRef.current) { // Effects were off, just turned on\n            targetEmissiveIntensityRef.current = 100.0; \n        } else { // Effects already on, vary intensity with scroll speed\n            const scrollSpeedFactor = Math.min(Math.abs(scrollDelta) / 50.0, 1.0); \n            targetEmissiveIntensityRef.current = 90.0 + scrollSpeedFactor * 10.0; \n        }\n        targetEmissiveIntensityRef.current = Math.max(90.0, Math.min(100.0, targetEmissiveIntensityRef.current));\n        \n        targetShipBoostZOffsetRef.current = -FORWARD_BOOST_AMOUNT;\n        if (cameraRef.current) targetCameraFovForBoostRef.current = cameraFov - FOV_DECREASE_AMOUNT;\n        isScrollingRef.current = true; // Mark effects as active\n    } else {\n        // Scroll not in desired direction, or no scroll (delta is 0)\n        // If effects were active and now the condition is not met, turn them off.\n        isScrollingRef.current = false;\n        targetEmissiveIntensityRef.current = 30.0;\n        targetShipBoostZOffsetRef.current = 0;\n        if (cameraRef.current) targetCameraFovForBoostRef.current = cameraFov;\n    }\n    \n    lastScrollTopRef.current = scrollTop;\n\n    // Clear previous timeout and set a new one to handle the \"scroll stopped\" case\n    if (scrollTimeoutRef.current) clearTimeout(scrollTimeoutRef.current);\n    scrollTimeoutRef.current = setTimeout(() => {\n        isScrollingRef.current = false; // Scrolling stopped, turn effects off\n        targetEmissiveIntensityRef.current = 30.0;\n        targetShipBoostZOffsetRef.current = 0;\n        if (cameraRef.current) targetCameraFovForBoostRef.current = cameraFov;\n    }, 150);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cameraFov]); // FOV_DECREASE_AMOUNT and FORWARD_BOOST_AMOUNT are constants\n\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n    const currentMount = mountRef.current;\n    \n    if (!rendererRef.current) { \n      initThreeScene(currentMount);\n    }\n    \n    const clock = new THREE.Clock();\n\n    const handleMouseMove = (event: MouseEvent) => {\n        isMouseOutsideRef.current = false;\n        if (currentMount) { \n            const newMouseX = (event.clientX / currentMount.clientWidth) * 2 - 1;\n            const newMouseY = -(event.clientY / currentMount.clientHeight) * 2 + 1;\n            mousePositionRef.current.set(newMouseX, newMouseY);\n        }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    const handleDocumentMouseLeave = () => { isMouseOutsideRef.current = true; };\n    document.documentElement.addEventListener('mouseleave', handleDocumentMouseLeave);\n    const handleDocumentMouseEnter = () => { isMouseOutsideRef.current = false; };\n    document.documentElement.addEventListener('mouseenter', handleDocumentMouseEnter);\n\n    let animationFrameId: number;\n    const animate = () => {\n      animationFrameId = requestAnimationFrame(animate);\n      const deltaTime = clock.getDelta();\n\n      if (mixerRef.current) {\n        mixerRef.current.update(deltaTime);\n      }\n\n      // Lerp ship emissive intensity\n      if (Math.abs(shipEmissiveIntensity - targetEmissiveIntensityRef.current) > 0.01) {\n        const lerpFactor = Math.min(deltaTime * 5.0, 1.0); \n        let newIntensity = THREE.MathUtils.lerp(shipEmissiveIntensity, targetEmissiveIntensityRef.current, lerpFactor); \n        setShipEmissiveIntensity(newIntensity);\n      }\n\n      // Lerp camera FOV for boost effect\n      if (cameraRef.current && Math.abs(cameraRef.current.fov - targetCameraFovForBoostRef.current) > 0.01) {\n        cameraRef.current.fov = THREE.MathUtils.lerp(cameraRef.current.fov, targetCameraFovForBoostRef.current, ACCELERATION_EFFECT_LERP_SPEED);\n        cameraRef.current.updateProjectionMatrix();\n      }\n\n      // Lerp ship Z boost offset\n      currentShipBoostZOffsetRef.current = THREE.MathUtils.lerp(\n        currentShipBoostZOffsetRef.current,\n        targetShipBoostZOffsetRef.current,\n        ACCELERATION_EFFECT_LERP_SPEED\n      );\n\n      if (wormholeMaterial1Ref.current) {\n        const mat1 = wormholeMaterial1Ref.current;\n        if (mat1.map) { mat1.map.offset.x += wormhole1OffsetXSpeed * deltaTime; mat1.map.offset.y += wormhole1OffsetYSpeed * deltaTime; }\n        if (mat1.emissiveMap) { mat1.emissiveMap.offset.x += wormhole1OffsetXSpeed * deltaTime; mat1.emissiveMap.offset.y += wormhole1OffsetYSpeed * deltaTime; }\n        if (mat1.normalMap) { mat1.normalMap.offset.x += wormhole1OffsetXSpeed * deltaTime; mat1.normalMap.offset.y += wormhole1OffsetYSpeed * deltaTime; }\n      }\n      if (wormholeMaterial2Ref.current) {\n        const mat2 = wormholeMaterial2Ref.current;\n        if (mat2.map) { mat2.map.offset.x += wormhole2OffsetXSpeed * deltaTime; mat2.map.offset.y += wormhole2OffsetYSpeed * deltaTime; }\n        if (mat2.emissiveMap) { mat2.emissiveMap.offset.x += wormhole2OffsetXSpeed * deltaTime; mat2.emissiveMap.offset.y += wormhole2OffsetYSpeed * deltaTime; }\n        if (mat2.normalMap) { mat2.normalMap.offset.x += wormhole2OffsetXSpeed * deltaTime; mat2.normalMap.offset.y += wormhole2OffsetYSpeed * deltaTime; }\n      }\n\n      if (spaceshipRef.current) {\n        if (!shipIntroAnimationCompleteRef.current) {\n            const targetIntroPosition = new THREE.Vector3(shipBasePosX, shipBasePosY, shipBasePosZ);\n            spaceshipRef.current.position.lerp(targetIntroPosition, SHIP_INTRO_ANIMATION_SPEED);\n\n            if (spaceshipRef.current.position.distanceTo(targetIntroPosition) < 0.01) {\n                spaceshipRef.current.position.copy(targetIntroPosition);\n                shipIntroAnimationCompleteRef.current = true;\n            }\n        } else { \n            let currentInputMouseX = mousePositionRef.current.x;\n            let currentInputMouseY = mousePositionRef.current.y;\n\n            if (isMouseOutsideRef.current) {\n                currentInputMouseX = 0; \n                currentInputMouseY = 0; \n            }\n            \n            targetShipPositionRef.current.x = currentInputMouseX * parallaxFactorX + shipBasePosX;\n            targetShipPositionRef.current.y = currentInputMouseY * parallaxFactorY + shipBasePosY;\n            targetShipPositionRef.current.z = shipBasePosZ + currentShipBoostZOffsetRef.current; \n\n            spaceshipRef.current.position.lerp(targetShipPositionRef.current, mouseFollowSpeed);\n\n            const baseForwardRotationY = shipRotY; \n            const targetPitch = shipRotX - THREE.MathUtils.clamp(currentInputMouseY * shipRotationFactor * 0.7, -shipMaxTilt, shipMaxTilt);\n            const targetYaw = baseForwardRotationY - THREE.MathUtils.clamp(currentInputMouseX * shipRotationFactor * 0.5, -shipMaxTilt * 0.8, shipMaxTilt * 0.8);\n            const targetRoll = shipRotZState - THREE.MathUtils.clamp(currentInputMouseX * shipRotationFactor, -shipMaxTilt, shipMaxTilt);\n\n            spaceshipRef.current.rotation.x = THREE.MathUtils.lerp(spaceshipRef.current.rotation.x, targetPitch, mouseFollowSpeed);\n            spaceshipRef.current.rotation.y = THREE.MathUtils.lerp(spaceshipRef.current.rotation.y, targetYaw, mouseFollowSpeed);\n            spaceshipRef.current.rotation.z = THREE.MathUtils.lerp(spaceshipRef.current.rotation.z, targetRoll, mouseFollowSpeed);\n        }\n      }\n\n      if (spaceshipRef.current && shipEmissiveIntensity > PARTICLE_EMISSION_INTENSITY_THRESHOLD) {\n        const emissionChanceFactor = Math.min(1.0, (shipEmissiveIntensity - PARTICLE_EMISSION_INTENSITY_THRESHOLD) / (100.0 - PARTICLE_EMISSION_INTENSITY_THRESHOLD));\n        const numToEmit = Math.floor(emissionChanceFactor * EFFECTIVE_EMISSION_RATE * deltaTime);\n        for (let k = 0; k < numToEmit; k++) {\n             if (Math.random() < emissionChanceFactor) emitTrailParticle(); \n        }\n      }\n\n      if (trailParticlesRef.current.length > 0 && cameraRef.current) {\n        for (let i = trailParticlesRef.current.length - 1; i >= 0; i--) {\n          const p = trailParticlesRef.current[i];\n          p.life -= deltaTime;\n\n          if (p.life <= 0) {\n            trailParticleContainerRef.current?.remove(p.mesh);\n            p.mesh.geometry.dispose();\n            if (p.mesh.material.map) p.mesh.material.map.dispose(); \n            p.mesh.material.dispose();\n            trailParticlesRef.current.splice(i, 1);\n          } else {\n            p.mesh.position.addScaledVector(p.velocity, deltaTime);\n            const lifeRatio = p.life / p.maxLife;\n            p.mesh.material.opacity = lifeRatio;\n            const currentScale = p.initialScale * (0.5 + lifeRatio * 0.5); \n            p.mesh.scale.set(currentScale, currentScale, currentScale);\n            p.mesh.lookAt(cameraRef.current.position); \n          }\n        }\n      }\n\n      if (speedLinesPassRef.current && rendererRef.current) {\n          speedLinesPassRef.current.uniforms.u_time.value = clock.getElapsedTime();\n          speedLinesPassRef.current.uniforms.u_scroll_active.value = isScrollingRef.current ? 1.0 : 0.0;\n          speedLinesPassRef.current.uniforms.u_resolution.value.set(\n            rendererRef.current.domElement.width,\n            rendererRef.current.domElement.height\n          );\n      }\n      \n      composerRef.current?.render(deltaTime);\n    };\n    animate();\n\n    const handleResize = () => {\n      if (!mountRef.current || !rendererRef.current || !cameraRef.current || !composerRef.current) return;\n      const width = currentMount.clientWidth;\n      const height = currentMount.clientHeight;\n      \n      cameraRef.current.aspect = width / height;\n      cameraRef.current.updateProjectionMatrix();\n      \n      rendererRef.current.setSize(width, height);\n      composerRef.current.setSize(width, height);\n      if (bloomPassRef.current) {\n         bloomPassRef.current.setSize(width, height);\n      }\n      if (speedLinesPassRef.current) {\n        speedLinesPassRef.current.uniforms.u_resolution.value.set(width, height);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize(); \n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    lastScrollTopRef.current = window.scrollY; // Initialize lastScrollTopRef\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('mousemove', handleMouseMove);\n      document.documentElement.removeEventListener('mouseleave', handleDocumentMouseLeave);\n      document.documentElement.removeEventListener('mouseenter', handleDocumentMouseEnter);\n      if (scrollTimeoutRef.current) clearTimeout(scrollTimeoutRef.current);\n      if (animationFrameId) cancelAnimationFrame(animationFrameId);\n      \n      trailParticlesRef.current.forEach(p => {\n        if(trailParticleContainerRef.current) trailParticleContainerRef.current.remove(p.mesh);\n        p.mesh.geometry.dispose();\n        if (p.mesh.material.map) p.mesh.material.map.dispose();\n        p.mesh.material.dispose();\n      });\n      trailParticlesRef.current = [];\n      if (particleGeometryRef.current) particleGeometryRef.current.dispose();\n      if (particleMaterialRef.current) particleMaterialRef.current.dispose();\n\n\n      if (rendererRef.current && currentMount && rendererRef.current.domElement.parentNode === currentMount) {\n         currentMount.removeChild(rendererRef.current.domElement);\n      }\n      \n      composerRef.current?.dispose();\n      if (bloomPassRef.current) bloomPassRef.current.dispose(); \n      if (speedLinesPassRef.current) speedLinesPassRef.current.material.dispose(); \n      \n      rendererRef.current?.dispose();       \n      \n      sceneRef.current?.traverse(object => {\n        if (object instanceof THREE.Mesh) {\n          if (object.geometry) object.geometry.dispose();\n          if (Array.isArray(object.material)) {\n            object.material.forEach(mat => mat.dispose());\n          } else if (object.material) {\n            object.material.dispose();\n          }\n        }\n      });\n      if (sceneRef.current?.environment && typeof (sceneRef.current.environment as THREE.Texture).dispose === 'function') {\n          (sceneRef.current.environment as THREE.Texture).dispose();\n      }\n      if (sceneRef.current?.background && typeof (sceneRef.current.background as THREE.Texture).dispose === 'function') {\n        (sceneRef.current.background as THREE.Texture).dispose();\n      }\n\n      if (mixerRef.current) { \n        mixerRef.current.stopAllAction();\n        mixerRef.current = null;\n      }\n\n      sceneRef.current = null; \n      cameraRef.current = null;\n      spaceshipRef.current = null;\n      wormholeRef.current = null;\n      wormholeMaterial1Ref.current = null;\n      wormholeMaterial2Ref.current = null;\n      rendererRef.current = null; \n      composerRef.current = null;\n      bloomPassRef.current = null;\n      speedLinesPassRef.current = null;\n      trailParticleContainerRef.current = null;\n      particleGeometryRef.current = null;\n      particleMaterialRef.current = null;\n\n      console.log(\"Three.js scene cleaned up.\");\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    initThreeScene, \n    emitTrailParticle, \n    handleScroll, // Add handleScroll here as it's now a useCallback\n    wormhole1OffsetXSpeed, wormhole1OffsetYSpeed, wormhole2OffsetXSpeed, wormhole2OffsetYSpeed\n  ]);\n\n  return (\n    <>\n      <div ref={mountRef} style={{ width: '100vw', height: '100vh', position: 'fixed', top: 0, left: 0, zIndex: 0 }} />\n    </>\n  );\n};\n\nexport default ScrollSurferScene;\n\n\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;AAaA,0BAA0B;AAC1B,MAAM,cAAc;IAClB,WAAW;IACX,UAAU;IACV,QAAQ;AACV;AAEA,yCAAyC;AACzC,MAAM,mBAAmB;AACzB,MAAM,qBAAqB;AAC3B,MAAM,cAAc,KAAK,EAAE,GAAG;AAC9B,MAAM,kBAAkB;AACxB,MAAM,kBAAkB;AACxB,MAAM,6BAA6B;AAEnC,4BAA4B;AAC5B,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wCAAwC;AAC9C,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B,CAAC;AAElC,iCAAiC;AACjC,MAAM,uBAAuB,IAAI,8CAA8C;AAC/E,MAAM,sBAAsB,IAAI,qCAAqC;AACrE,MAAM,iCAAiC,KAAK,uCAAuC;AACnF,MAAM,+BAAuD,QAAQ,wCAAwC;AAG7G,MAAM,yBAAyB,CAAC;;;;;;AAMhC,CAAC;AAED,MAAM,2BAA2B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDlC,CAAC;AAGD,MAAM,oBAA8B;IAClC,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IACxC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAA8B;IACvD,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAsB;IAC5C,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkC;IACzD,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAsB;IAChD,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAsB,OAAO,yBAAyB;IAC/E,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IAClD,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAA0B;IACpD,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAqB;IACpD,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAA+B;IAErD,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAc,EAAE;IAC/C,MAAM,4BAA4B,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAsB;IAC7D,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAA8B;IAC/D,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkC;IAEnE,MAAM,uBAAuB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAqC;IACvE,MAAM,uBAAuB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAqC;IAEvE,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,IAAI,iJAAA,CAAA,UAAa,CAAC,GAAG;IACrD,MAAM,wBAAwB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,IAAI,iJAAA,CAAA,UAAa,CAAC,GAAG,GAAG;IAC7D,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IACjC,MAAM,gCAAgC,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE7C,8CAA8C;IAC9C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAC9C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,iDAAiD;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAClD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAClD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,EAAE;IAChD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,qCAAqC;IACrC,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,4BAA4B;IACtG,MAAM,6BAA6B,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAC1C,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,QAAQ,mDAAmD;IACzF,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IACvD,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAEhC,gDAAgD;IAChD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,kDAAkD;IAClD,MAAM,CAAC,4BAA4B,8BAA8B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7E,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnE,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAEpE,MAAM,CAAC,4BAA4B,8BAA8B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7E,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnE,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAEpE,2BAA2B;IAC3B,MAAM,4BAA4B,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IACzC,MAAM,6BAA6B,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAC1C,MAAM,6BAA6B,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,YAAY,kCAAkC;IAExF,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACpC,IAAI,CAAC,aAAa,OAAO,IAAI,CAAC,0BAA0B,OAAO,IAAI,CAAC,oBAAoB,OAAO,IAAI,CAAC,oBAAoB,OAAO,IAAI,CAAC,UAAU,OAAO,EAAE;QACvJ,IAAI,kBAAkB,OAAO,CAAC,MAAM,IAAI,qBAAqB;QAE7D,MAAM,YAAY,aAAa,OAAO;QACtC,MAAM,WAAW,IAAI,iJAAA,CAAA,OAAU,CAAC,oBAAoB,OAAO,EAAE,oBAAoB,OAAO,CAAC,KAAK;QAE9F,MAAM,oBAAoB,IAAI,iJAAA,CAAA,UAAa;QAC3C,UAAU,gBAAgB,CAAC;QAC3B,MAAM,sBAAsB,IAAI,iJAAA,CAAA,aAAgB;QAChD,UAAU,kBAAkB,CAAC;QAE7B,MAAM,eAAe,IAAI,iJAAA,CAAA,UAAa,CAAC,GAAG,GAAG;QAC7C,aAAa,eAAe,CAAC;QAC7B,SAAS,QAAQ,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC;QAE9C,MAAM,eAAe,IAAI,iJAAA,CAAA,UAAa,CAAC,GAAG,GAAG,CAAC,CAAC,qBAAqB,KAAK,MAAM,KAAK,CAAC,qBAAqB,kBAAkB,CAAC;QAC7H,aAAa,eAAe,CAAC;QAE7B,aAAa,CAAC,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;QAC1C,aAAa,CAAC,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;QAC1C,aAAa,CAAC,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;QAE1C,MAAM,WAAW,wBAAwB,KAAK,MAAM,KAAK,CAAC,wBAAwB,qBAAqB;QAEvG,0BAA0B,OAAO,CAAC,GAAG,CAAC;QACtC,kBAAkB,OAAO,CAAC,IAAI,CAAC;YAC7B,MAAM;YACN,UAAU;YACV,MAAM;YACN,SAAS;YACT,cAAc,qBAAqB,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,qBAAqB;QAClF;IACF,GAAG,EAAE;IAGL,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAClC,IAAI,CAAC,gBAAgB,YAAY,OAAO,EAAE;QAE1C,QAAQ,GAAG,CAAC;QAEZ,MAAM,QAAQ,IAAI,iJAAA,CAAA,QAAW;QAC7B,SAAS,OAAO,GAAG;QACnB,MAAM,GAAG,GAAG,IAAI,iJAAA,CAAA,MAAS,CAAC,UAAU,IAAI;QACxC,sBAAsB,OAAO,CAAC,GAAG,CAAC,cAAc,cAAc;QAC9D,2BAA2B,OAAO,GAAG;QAGrC,MAAM,SAAS,IAAI,iJAAA,CAAA,oBAAuB,CAAC,WAAW,aAAa,WAAW,GAAG,aAAa,YAAY,EAAE,KAAK;QACjH,UAAU,OAAO,GAAG;QACpB,OAAO,QAAQ,CAAC,GAAG,CAAC,YAAY,YAAY;QAC5C,OAAO,QAAQ,CAAC,GAAG,CAAC,YAAY,YAAY;QAE5C,MAAM,WAAW,IAAI,iJAAA,CAAA,gBAAmB,CAAC;YAAE,WAAW;YAAM,OAAO;QAAM;QACzE,SAAS,OAAO,CAAC,aAAa,WAAW,EAAE,aAAa,YAAY;QACpE,SAAS,aAAa,CAAC,OAAO,gBAAgB,IAAI;QAClD,SAAS,WAAW,GAAG,iJAAA,CAAA,wBAA2B;QAClD,SAAS,mBAAmB,GAAG;QAC/B,aAAa,WAAW,CAAC,SAAS,UAAU;QAC5C,YAAY,OAAO,GAAG;QAEtB,wBAAwB;QACxB,MAAM,WAAW,IAAI,4KAAA,CAAA,iBAAc,CAAC;QACpC,YAAY,OAAO,GAAG;QAEtB,MAAM,aAAa,IAAI,wKAAA,CAAA,aAAU,CAAC,OAAO;QACzC,SAAS,OAAO,CAAC;QAEjB,MAAM,oBAAoB,IAAI,6KAAA,CAAA,kBAAe,CACzC,IAAI,iJAAA,CAAA,UAAa,CAAC,aAAa,WAAW,EAAE,aAAa,YAAY,GACrE,YAAY,QAAQ,EACpB,YAAY,MAAM,EAClB,YAAY,SAAS;QAEzB,aAAa,OAAO,GAAG;QACvB,SAAS,OAAO,CAAC;QAEjB,mBAAmB;QACnB,MAAM,qBAAqB,IAAI,iJAAA,CAAA,iBAAoB,CAAC;YAChD,UAAU;gBACN,UAAU;oBAAE,OAAO;gBAAK;gBACxB,cAAc;oBAAE,OAAO,IAAI,iJAAA,CAAA,UAAa,CAAC,aAAa,WAAW,EAAE,aAAa,YAAY;gBAAE;gBAC9F,QAAQ;oBAAE,OAAO;gBAAI;gBACrB,iBAAiB;oBAAE,OAAO;gBAAI;YAClC;YACA,cAAc;YACd,gBAAgB;QACpB;QACA,MAAM,yBAAyB,IAAI,wKAAA,CAAA,aAAU,CAAC;QAC9C,kBAAkB,OAAO,GAAG;QAC5B,SAAS,OAAO,CAAC;QAGjB,MAAM,YAAY,IAAI,wKAAA,CAAA,aAAU,CAAC,iKAAA,CAAA,aAAU;QAC3C,UAAU,cAAc,GAAG;QAC3B,SAAS,OAAO,CAAC;QAGjB,qBAAqB;QACrB,oBAAoB,OAAO,GAAG,IAAI,iJAAA,CAAA,gBAAmB,CAAC,GAAG;QACzD,oBAAoB,OAAO,GAAG,IAAI,iJAAA,CAAA,oBAAuB,CAAC;YACtD,OAAO;YACP,aAAa;YACb,SAAS;YACT,UAAU,iJAAA,CAAA,mBAAsB;YAChC,YAAY;QAChB;QACA,0BAA0B,OAAO,GAAG,IAAI,iJAAA,CAAA,QAAW;QACnD,MAAM,GAAG,CAAC,0BAA0B,OAAO;QAG3C,MAAM,aAAa,IAAI,iKAAA,CAAA,aAAU;QACjC,WAAW,IAAI,CACb,mBACA,CAAC;YACC,QAAQ,OAAO,GAAG,iJAAA,CAAA,mCAAsC;YACxD,MAAM,WAAW,GAAG;YACpB,MAAM,UAAU,GAAG;YACnB,QAAQ,GAAG,CAAC;QACd,GACA,WACA,CAAC;YACC,QAAQ,KAAK,CAAC,uBAAuB;YACrC,MAAM,UAAU,GAAG,IAAI,iJAAA,CAAA,QAAW,CAAC;YACnC,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAmB,aAAa;YAAiE;QAC1I;QAGF,MAAM,eAAe,IAAI,iJAAA,CAAA,eAAkB,CAAC,UAAU;QACtD,MAAM,GAAG,CAAC;QACV,MAAM,mBAAmB,IAAI,iJAAA,CAAA,mBAAsB,CAAC,UAAU;QAC9D,iBAAiB,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACrC,MAAM,GAAG,CAAC;QAEV,MAAM,SAAS,IAAI,iKAAA,CAAA,aAAU;QAC7B,OAAO,IAAI,CACT,yBACA,CAAC;YACC,MAAM,YAAY,KAAK,KAAK;YAC5B,aAAa,OAAO,GAAG;YAEvB,MAAM,oBAAoB,eAAe,CAAC;YAC1C,UAAU,QAAQ,CAAC,GAAG,CAAC,cAAc,cAAc;YACnD,8BAA8B,OAAO,GAAG;YAExC,UAAU,QAAQ,CAAC,GAAG,CAAC,UAAU,UAAU;YAC3C,UAAU,KAAK,CAAC,GAAG,CAAC,WAAW,WAAW;YAE1C,UAAU,QAAQ,CAAC,CAAC;gBAClB,IAAI,iBAAiB,iJAAA,CAAA,OAAU,IAAI,MAAM,QAAQ,EAAE;oBACjD,MAAM,YAAY,MAAM,OAAO,CAAC,MAAM,QAAQ,IAAI,MAAM,QAAQ,GAAG;wBAAC,MAAM,QAAQ;qBAAC;oBACnF,UAAU,OAAO,CAAC,CAAA;wBAChB,IAAI,AAAC,SAAwC,sBAAsB,EAAE;4BACnE,MAAM,mBAAmB;4BACzB,IAAI,iBAAiB,WAAW,EAAE;gCAChC,iBAAiB,iBAAiB,GAAG,MAAM,yBAAyB;gCACpE,iBAAiB,WAAW,GAAG;4BACjC;wBACF;oBACF;gBACF;YACF;YACA,MAAM,GAAG,CAAC;YACV,QAAQ,GAAG,CAAC;YAEZ,IAAI,KAAK,UAAU,IAAI,KAAK,UAAU,CAAC,MAAM,EAAE;gBAC7C,SAAS,OAAO,GAAG,IAAI,iJAAA,CAAA,iBAAoB,CAAC;gBAC5C,KAAK,UAAU,CAAC,OAAO,CAAC,CAAC;oBACvB,IAAG,SAAS,OAAO,EAAC;wBAClB,MAAM,SAAS,SAAS,OAAO,CAAC,UAAU,CAAC;wBAC3C,OAAO,IAAI;oBACb;gBACF;gBACA,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,MAAM,CAAC,0BAA0B,CAAC;YAC1E,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QAEF,GACA,WACA,CAAC;YACC,QAAQ,KAAK,CAAC,kCAAkC;YAChD,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAwB,aAAa;YAAwC;QACtH;QAGF,OAAO,IAAI,CACT,wBACA,CAAC;YACC,MAAM,WAAW,KAAK,KAAK;YAC3B,YAAY,OAAO,GAAG;YACtB,SAAS,QAAQ,CAAC,GAAG,CAAC,cAAc,cAAc;YAClD,SAAS,QAAQ,CAAC,GAAG,CAAC,cAAc,cAAc;YAClD,SAAS,KAAK,CAAC,GAAG,CAAC,eAAe,eAAe;YAEjD,SAAS,QAAQ,CAAC,CAAC;gBACjB,IAAI,iBAAiB,iJAAA,CAAA,OAAU,IAAI,MAAM,QAAQ,EAAE;oBACjD,MAAM,WAAW,MAAM,QAAQ;oBAC/B,IAAI,SAAS,IAAI,KAAK,cAAc;wBAClC,qBAAqB,OAAO,GAAG;wBAC/B,SAAS,iBAAiB,GAAG;wBAC7B,IAAI,SAAS,GAAG,EAAE;4BAAE,SAAS,GAAG,CAAC,KAAK,GAAG,SAAS,GAAG,CAAC,KAAK,GAAG,iJAAA,CAAA,iBAAoB;wBAAE;wBACpF,IAAI,SAAS,WAAW,EAAE;4BAAE,SAAS,WAAW,CAAC,KAAK,GAAG,SAAS,WAAW,CAAC,KAAK,GAAG,iJAAA,CAAA,iBAAoB;wBAAE;wBAC5G,IAAI,SAAS,SAAS,EAAE;4BAAE,SAAS,SAAS,CAAC,KAAK,GAAG,SAAS,SAAS,CAAC,KAAK,GAAG,iJAAA,CAAA,iBAAoB;wBAAE;oBACxG,OAAO,IAAI,SAAS,IAAI,KAAK,cAAc;wBACzC,qBAAqB,OAAO,GAAG;wBAC/B,SAAS,iBAAiB,GAAG;wBAC7B,IAAI,SAAS,GAAG,EAAE;4BAAE,SAAS,GAAG,CAAC,KAAK,GAAG,SAAS,GAAG,CAAC,KAAK,GAAG,iJAAA,CAAA,iBAAoB;wBAAE;wBACpF,IAAI,SAAS,WAAW,EAAE;4BAAE,SAAS,WAAW,CAAC,KAAK,GAAG,SAAS,WAAW,CAAC,KAAK,GAAG,iJAAA,CAAA,iBAAoB;wBAAE;wBAC5G,IAAI,SAAS,SAAS,EAAE;4BAAE,SAAS,SAAS,CAAC,KAAK,GAAG,SAAS,SAAS,CAAC,KAAK,GAAG,iJAAA,CAAA,iBAAoB;wBAAE;oBACxG;gBACF;YACF;YACA,MAAM,GAAG,CAAC;YACV,QAAQ,GAAG,CAAC;QACd,GACA,WACA,CAAC;YACC,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAuB,aAAa;YAAuC;QACpH;IAEJ,uDAAuD;IACvD,GAAG;QACD;QACA;QAAc;QAAc;QAC5B;QAAU;QAAU;QAAe;QACnC;QAAc;QAAc;QAC5B;QAAc;QAAc;QAAc;QAC1C;QACA;QACA;QAAY;QAAY;QAAY;QAAY;QAAY;QAAY;KACzE;IAED,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,aAAa,OAAO,EAAE;YACxB,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC7B,IAAI,iBAAiB,iJAAA,CAAA,OAAU,IAAI,MAAM,QAAQ,EAAE;oBACjD,MAAM,YAAY,MAAM,OAAO,CAAC,MAAM,QAAQ,IAAI,MAAM,QAAQ,GAAG;wBAAC,MAAM,QAAQ;qBAAC;oBACnF,UAAU,OAAO,CAAC,CAAA;wBAChB,IAAI,AAAC,SAAwC,sBAAsB,EAAE;4BACnE,MAAM,mBAAmB;4BACzB,IAAI,iBAAiB,WAAW,EAAE;gCAChC,iBAAiB,iBAAiB,GAAG;gCACrC,iBAAiB,WAAW,GAAG;4BACjC;wBACF;oBACF;gBACF;YACF;QACF;IACF,GAAG;QAAC;KAAsB;IAE1B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,qBAAqB,OAAO,EAAE;YAChC,qBAAqB,OAAO,CAAC,iBAAiB,GAAG;YACjD,qBAAqB,OAAO,CAAC,WAAW,GAAG;QAC7C;QACA,IAAI,qBAAqB,OAAO,EAAE;YAChC,qBAAqB,OAAO,CAAC,iBAAiB,GAAG;YACjD,qBAAqB,OAAO,CAAC,WAAW,GAAG;QAC7C;IACF,GAAG;QAAC;QAA4B;KAA2B;IAE3D,4EAA4E;IAC5E,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,2BAA2B,OAAO,GAAG;IACvC,GAAG;QAAC;KAAU;IAGd,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC/B,MAAM,YAAY,OAAO,OAAO;QAChC,MAAM,cAAc,YAAY,iBAAiB,OAAO;QAExD,IAAI,0BAA0B;QAC9B,IAAI,cAAc,KAAK,iCAAiC,QAAQ;YAC5D,0BAA0B;QAC9B,OAAO,IAAI,cAAc,KAAK,iCAAiC,MAAM;YACjE,0BAA0B;QAC9B,OAAO,IAAI,gBAAgB,KAAK,iCAAiC,QAAQ;YACrE,0BAA0B;QAC9B;QAEA,IAAI,yBAAyB;YACzB,IAAI,CAAC,eAAe,OAAO,EAAE;gBACzB,2BAA2B,OAAO,GAAG;YACzC,OAAO;gBACH,MAAM,oBAAoB,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,eAAe,MAAM;gBACjE,2BAA2B,OAAO,GAAG,OAAO,oBAAoB;YACpE;YACA,2BAA2B,OAAO,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,2BAA2B,OAAO;YAEtG,0BAA0B,OAAO,GAAG,CAAC;YACrC,IAAI,UAAU,OAAO,EAAE,2BAA2B,OAAO,GAAG,YAAY;YACxE,eAAe,OAAO,GAAG,MAAM,yBAAyB;QAC5D,OAAO;YACH,6DAA6D;YAC7D,0EAA0E;YAC1E,eAAe,OAAO,GAAG;YACzB,2BAA2B,OAAO,GAAG;YACrC,0BAA0B,OAAO,GAAG;YACpC,IAAI,UAAU,OAAO,EAAE,2BAA2B,OAAO,GAAG;QAChE;QAEA,iBAAiB,OAAO,GAAG;QAE3B,+EAA+E;QAC/E,IAAI,iBAAiB,OAAO,EAAE,aAAa,iBAAiB,OAAO;QACnE,iBAAiB,OAAO,GAAG,WAAW;YAClC,eAAe,OAAO,GAAG,OAAO,sCAAsC;YACtE,2BAA2B,OAAO,GAAG;YACrC,0BAA0B,OAAO,GAAG;YACpC,IAAI,UAAU,OAAO,EAAE,2BAA2B,OAAO,GAAG;QAChE,GAAG;IACL,uDAAuD;IACvD,GAAG;QAAC;KAAU,GAAG,6DAA6D;IAG9E,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,SAAS,OAAO,EAAE;QACvB,MAAM,eAAe,SAAS,OAAO;QAErC,IAAI,CAAC,YAAY,OAAO,EAAE;YACxB,eAAe;QACjB;QAEA,MAAM,QAAQ,IAAI,iJAAA,CAAA,QAAW;QAE7B,MAAM,kBAAkB,CAAC;YACrB,kBAAkB,OAAO,GAAG;YAC5B,IAAI,cAAc;gBACd,MAAM,YAAY,AAAC,MAAM,OAAO,GAAG,aAAa,WAAW,GAAI,IAAI;gBACnE,MAAM,YAAY,CAAC,CAAC,MAAM,OAAO,GAAG,aAAa,YAAY,IAAI,IAAI;gBACrE,iBAAiB,OAAO,CAAC,GAAG,CAAC,WAAW;YAC5C;QACJ;QACA,OAAO,gBAAgB,CAAC,aAAa;QAErC,MAAM,2BAA2B;YAAQ,kBAAkB,OAAO,GAAG;QAAM;QAC3E,SAAS,eAAe,CAAC,gBAAgB,CAAC,cAAc;QACxD,MAAM,2BAA2B;YAAQ,kBAAkB,OAAO,GAAG;QAAO;QAC5E,SAAS,eAAe,CAAC,gBAAgB,CAAC,cAAc;QAExD,IAAI;QACJ,MAAM,UAAU;YACd,mBAAmB,sBAAsB;YACzC,MAAM,YAAY,MAAM,QAAQ;YAEhC,IAAI,SAAS,OAAO,EAAE;gBACpB,SAAS,OAAO,CAAC,MAAM,CAAC;YAC1B;YAEA,+BAA+B;YAC/B,IAAI,KAAK,GAAG,CAAC,wBAAwB,2BAA2B,OAAO,IAAI,MAAM;gBAC/E,MAAM,aAAa,KAAK,GAAG,CAAC,YAAY,KAAK;gBAC7C,IAAI,eAAe,iJAAA,CAAA,YAAe,CAAC,IAAI,CAAC,uBAAuB,2BAA2B,OAAO,EAAE;gBACnG,yBAAyB;YAC3B;YAEA,mCAAmC;YACnC,IAAI,UAAU,OAAO,IAAI,KAAK,GAAG,CAAC,UAAU,OAAO,CAAC,GAAG,GAAG,2BAA2B,OAAO,IAAI,MAAM;gBACpG,UAAU,OAAO,CAAC,GAAG,GAAG,iJAAA,CAAA,YAAe,CAAC,IAAI,CAAC,UAAU,OAAO,CAAC,GAAG,EAAE,2BAA2B,OAAO,EAAE;gBACxG,UAAU,OAAO,CAAC,sBAAsB;YAC1C;YAEA,2BAA2B;YAC3B,2BAA2B,OAAO,GAAG,iJAAA,CAAA,YAAe,CAAC,IAAI,CACvD,2BAA2B,OAAO,EAClC,0BAA0B,OAAO,EACjC;YAGF,IAAI,qBAAqB,OAAO,EAAE;gBAChC,MAAM,OAAO,qBAAqB,OAAO;gBACzC,IAAI,KAAK,GAAG,EAAE;oBAAE,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;oBAAW,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;gBAAW;gBAChI,IAAI,KAAK,WAAW,EAAE;oBAAE,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;oBAAW,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;gBAAW;gBACxJ,IAAI,KAAK,SAAS,EAAE;oBAAE,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;oBAAW,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;gBAAW;YACpJ;YACA,IAAI,qBAAqB,OAAO,EAAE;gBAChC,MAAM,OAAO,qBAAqB,OAAO;gBACzC,IAAI,KAAK,GAAG,EAAE;oBAAE,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;oBAAW,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;gBAAW;gBAChI,IAAI,KAAK,WAAW,EAAE;oBAAE,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;oBAAW,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;gBAAW;gBACxJ,IAAI,KAAK,SAAS,EAAE;oBAAE,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;oBAAW,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,wBAAwB;gBAAW;YACpJ;YAEA,IAAI,aAAa,OAAO,EAAE;gBACxB,IAAI,CAAC,8BAA8B,OAAO,EAAE;oBACxC,MAAM,sBAAsB,IAAI,iJAAA,CAAA,UAAa,CAAC,cAAc,cAAc;oBAC1E,aAAa,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB;oBAExD,IAAI,aAAa,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,uBAAuB,MAAM;wBACtE,aAAa,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;wBACnC,8BAA8B,OAAO,GAAG;oBAC5C;gBACJ,OAAO;oBACH,IAAI,qBAAqB,iBAAiB,OAAO,CAAC,CAAC;oBACnD,IAAI,qBAAqB,iBAAiB,OAAO,CAAC,CAAC;oBAEnD,IAAI,kBAAkB,OAAO,EAAE;wBAC3B,qBAAqB;wBACrB,qBAAqB;oBACzB;oBAEA,sBAAsB,OAAO,CAAC,CAAC,GAAG,qBAAqB,kBAAkB;oBACzE,sBAAsB,OAAO,CAAC,CAAC,GAAG,qBAAqB,kBAAkB;oBACzE,sBAAsB,OAAO,CAAC,CAAC,GAAG,eAAe,2BAA2B,OAAO;oBAEnF,aAAa,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,sBAAsB,OAAO,EAAE;oBAElE,MAAM,uBAAuB;oBAC7B,MAAM,cAAc,WAAW,iJAAA,CAAA,YAAe,CAAC,KAAK,CAAC,qBAAqB,qBAAqB,KAAK,CAAC,aAAa;oBAClH,MAAM,YAAY,uBAAuB,iJAAA,CAAA,YAAe,CAAC,KAAK,CAAC,qBAAqB,qBAAqB,KAAK,CAAC,cAAc,KAAK,cAAc;oBAChJ,MAAM,aAAa,gBAAgB,iJAAA,CAAA,YAAe,CAAC,KAAK,CAAC,qBAAqB,oBAAoB,CAAC,aAAa;oBAEhH,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,iJAAA,CAAA,YAAe,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa;oBACrG,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,iJAAA,CAAA,YAAe,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,WAAW;oBACnG,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,iJAAA,CAAA,YAAe,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY;gBACxG;YACF;YAEA,IAAI,aAAa,OAAO,IAAI,wBAAwB,uCAAuC;gBACzF,MAAM,uBAAuB,KAAK,GAAG,CAAC,KAAK,CAAC,wBAAwB,qCAAqC,IAAI,CAAC,QAAQ,qCAAqC;gBAC3J,MAAM,YAAY,KAAK,KAAK,CAAC,uBAAuB,0BAA0B;gBAC9E,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,IAAK;oBAC/B,IAAI,KAAK,MAAM,KAAK,sBAAsB;gBAC/C;YACF;YAEA,IAAI,kBAAkB,OAAO,CAAC,MAAM,GAAG,KAAK,UAAU,OAAO,EAAE;gBAC7D,IAAK,IAAI,IAAI,kBAAkB,OAAO,CAAC,MAAM,GAAG,GAAG,KAAK,GAAG,IAAK;oBAC9D,MAAM,IAAI,kBAAkB,OAAO,CAAC,EAAE;oBACtC,EAAE,IAAI,IAAI;oBAEV,IAAI,EAAE,IAAI,IAAI,GAAG;wBACf,0BAA0B,OAAO,EAAE,OAAO,EAAE,IAAI;wBAChD,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;wBACvB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO;wBACpD,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;wBACvB,kBAAkB,OAAO,CAAC,MAAM,CAAC,GAAG;oBACtC,OAAO;wBACL,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,QAAQ,EAAE;wBAC5C,MAAM,YAAY,EAAE,IAAI,GAAG,EAAE,OAAO;wBACpC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG;wBAC1B,MAAM,eAAe,EAAE,YAAY,GAAG,CAAC,MAAM,YAAY,GAAG;wBAC5D,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,cAAc;wBAC7C,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,OAAO,CAAC,QAAQ;oBAC1C;gBACF;YACF;YAEA,IAAI,kBAAkB,OAAO,IAAI,YAAY,OAAO,EAAE;gBAClD,kBAAkB,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,cAAc;gBACtE,kBAAkB,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,GAAG,eAAe,OAAO,GAAG,MAAM;gBAC1F,kBAAkB,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CACvD,YAAY,OAAO,CAAC,UAAU,CAAC,KAAK,EACpC,YAAY,OAAO,CAAC,UAAU,CAAC,MAAM;YAE3C;YAEA,YAAY,OAAO,EAAE,OAAO;QAC9B;QACA;QAEA,MAAM,eAAe;YACnB,IAAI,CAAC,SAAS,OAAO,IAAI,CAAC,YAAY,OAAO,IAAI,CAAC,UAAU,OAAO,IAAI,CAAC,YAAY,OAAO,EAAE;YAC7F,MAAM,QAAQ,aAAa,WAAW;YACtC,MAAM,SAAS,aAAa,YAAY;YAExC,UAAU,OAAO,CAAC,MAAM,GAAG,QAAQ;YACnC,UAAU,OAAO,CAAC,sBAAsB;YAExC,YAAY,OAAO,CAAC,OAAO,CAAC,OAAO;YACnC,YAAY,OAAO,CAAC,OAAO,CAAC,OAAO;YACnC,IAAI,aAAa,OAAO,EAAE;gBACvB,aAAa,OAAO,CAAC,OAAO,CAAC,OAAO;YACvC;YACA,IAAI,kBAAkB,OAAO,EAAE;gBAC7B,kBAAkB,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO;YACnE;QACF;QACA,OAAO,gBAAgB,CAAC,UAAU;QAClC;QAEA,OAAO,gBAAgB,CAAC,UAAU,cAAc;YAAE,SAAS;QAAK;QAChE,iBAAiB,OAAO,GAAG,OAAO,OAAO,EAAE,8BAA8B;QAEzE,OAAO;YACL,OAAO,mBAAmB,CAAC,UAAU;YACrC,OAAO,mBAAmB,CAAC,UAAU;YACrC,OAAO,mBAAmB,CAAC,aAAa;YACxC,SAAS,eAAe,CAAC,mBAAmB,CAAC,cAAc;YAC3D,SAAS,eAAe,CAAC,mBAAmB,CAAC,cAAc;YAC3D,IAAI,iBAAiB,OAAO,EAAE,aAAa,iBAAiB,OAAO;YACnE,IAAI,kBAAkB,qBAAqB;YAE3C,kBAAkB,OAAO,CAAC,OAAO,CAAC,CAAA;gBAChC,IAAG,0BAA0B,OAAO,EAAE,0BAA0B,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI;gBACrF,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;gBACvB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO;gBACpD,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;YACzB;YACA,kBAAkB,OAAO,GAAG,EAAE;YAC9B,IAAI,oBAAoB,OAAO,EAAE,oBAAoB,OAAO,CAAC,OAAO;YACpE,IAAI,oBAAoB,OAAO,EAAE,oBAAoB,OAAO,CAAC,OAAO;YAGpE,IAAI,YAAY,OAAO,IAAI,gBAAgB,YAAY,OAAO,CAAC,UAAU,CAAC,UAAU,KAAK,cAAc;gBACpG,aAAa,WAAW,CAAC,YAAY,OAAO,CAAC,UAAU;YAC1D;YAEA,YAAY,OAAO,EAAE;YACrB,IAAI,aAAa,OAAO,EAAE,aAAa,OAAO,CAAC,OAAO;YACtD,IAAI,kBAAkB,OAAO,EAAE,kBAAkB,OAAO,CAAC,QAAQ,CAAC,OAAO;YAEzE,YAAY,OAAO,EAAE;YAErB,SAAS,OAAO,EAAE,SAAS,CAAA;gBACzB,IAAI,kBAAkB,iJAAA,CAAA,OAAU,EAAE;oBAChC,IAAI,OAAO,QAAQ,EAAE,OAAO,QAAQ,CAAC,OAAO;oBAC5C,IAAI,MAAM,OAAO,CAAC,OAAO,QAAQ,GAAG;wBAClC,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAA,MAAO,IAAI,OAAO;oBAC5C,OAAO,IAAI,OAAO,QAAQ,EAAE;wBAC1B,OAAO,QAAQ,CAAC,OAAO;oBACzB;gBACF;YACF;YACA,IAAI,SAAS,OAAO,EAAE,eAAe,OAAO,AAAC,SAAS,OAAO,CAAC,WAAW,CAAmB,OAAO,KAAK,YAAY;gBAC/G,SAAS,OAAO,CAAC,WAAW,CAAmB,OAAO;YAC3D;YACA,IAAI,SAAS,OAAO,EAAE,cAAc,OAAO,AAAC,SAAS,OAAO,CAAC,UAAU,CAAmB,OAAO,KAAK,YAAY;gBAC/G,SAAS,OAAO,CAAC,UAAU,CAAmB,OAAO;YACxD;YAEA,IAAI,SAAS,OAAO,EAAE;gBACpB,SAAS,OAAO,CAAC,aAAa;gBAC9B,SAAS,OAAO,GAAG;YACrB;YAEA,SAAS,OAAO,GAAG;YACnB,UAAU,OAAO,GAAG;YACpB,aAAa,OAAO,GAAG;YACvB,YAAY,OAAO,GAAG;YACtB,qBAAqB,OAAO,GAAG;YAC/B,qBAAqB,OAAO,GAAG;YAC/B,YAAY,OAAO,GAAG;YACtB,YAAY,OAAO,GAAG;YACtB,aAAa,OAAO,GAAG;YACvB,kBAAkB,OAAO,GAAG;YAC5B,0BAA0B,OAAO,GAAG;YACpC,oBAAoB,OAAO,GAAG;YAC9B,oBAAoB,OAAO,GAAG;YAE9B,QAAQ,GAAG,CAAC;QACd;IACF,uDAAuD;IACvD,GAAG;QACD;QACA;QACA;QACA;QAAuB;QAAuB;QAAuB;KACtE;IAED,qBACE;kBACE,cAAA,8OAAC;YAAI,KAAK;YAAU,OAAO;gBAAE,OAAO;gBAAS,QAAQ;gBAAS,UAAU;gBAAS,KAAK;gBAAG,MAAM;gBAAG,QAAQ;YAAE;;;;;;;AAGlH;uCAEe","debugId":null}}]
}